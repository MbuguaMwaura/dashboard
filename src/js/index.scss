
body {
    margin: unset;
    background-color: #1d1f20;
    overflow: hidden;
}

@keyframes scale {
    0% {
        transform: scale(1.1); 
        filter: brightness(0.6);
        
    }
    to {
        transform: scale(3); 
        filter: brightness(0.3);
    }
}

@keyframes scaleBack {
    0% {
        transform: scale(3); 
        filter: brightness(0.3);
        
    }
    to {
        transform: scale(1.1); 
        filter: brightness(0.6);
    }
}

#background{
    animation: 1.5s ease-in  scaleBack;
    height: 100vh;
    width: 100vw;
    object-fit: cover;
    position: fixed;
    transform: scale(1.1); 
    filter: brightness(0.6);
}

@keyframes scale {
    0% {
        transform: scale(1.1); 
        filter: brightness(0.6);
       
    }
    to {
        transform: scale(3); 
        filter: brightness(0.3);
    }
  }

#backgroundTwo{
    animation: 1.5s ease-in  scale;
    height: 100vh;
    width: 100vw;
    object-fit: cover;
    position: fixed;
    filter: brightness(0.3);
    transform: scale(3); 
}

#content{
    position: absolute;
    height: 100vh;
    text-align: center;
    margin: auto;
    display: flex;
    flex-direction: column;
    justify-content: center;
}
#main{
    display: flex;
    justify-content: center;
}

@keyframes pulse {
    0% {
      transform: scale(0.95);
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    }
    
    70% {
      transform: scale(1);
    box-shadow: 0 0 0 10px rgba(255, 255, 255, .4);
    }
    
    100% {
      
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    }
  }

#avatar{
    animation: pulse-black 2s infinite;
    height: 150px;
    width: 150px;
    border-radius: 50%;
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 1);
    
}

.blobs-container {
    display: flex;
  }
  

.blob {
    background: white;
    border-radius: 50%;
    box-shadow: 0 0 0 0 rgba(255, 255, 255, 1);
    margin: 10px;
    height: 10px;
    width: 10px;
    transform: scale(1);
    animation: pulse-black 2s infinite;
  }
  
  @keyframes pulse-black {
    0% {
     
      box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
    }
    
    70% {
   
      box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
    }
    
    100% {
      
      box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
    }
  }
#profile{
    display: flex;
    gap : 20px;
}
.text{
    color: white;
    font-family: 'Lato', sans-serif;
    text-align: initial;
    margin: auto;
  
}
.light{
    font-weight: 100;
    margin: unset;
}
.heavy{
    font-weight: 300;
    font-size: 32px;
    margin: unset;
    
}
#footer{
    font-weight: 300;
    position: fixed;
    margin-top: 85vh;
    display: grid;
}
#date{
    display: flex;
    gap: 4px;
}
#home_icon{
    height: 24px;
    margin: auto auto 16px auto;
    background-color:rgba(255, 255, 255, .2);;
    border-radius: 50%;
    padding: 10px;

}

@keyframes fadeOut {
    0% {
        filter: brightness(1) blur(0px);
    }
    100% {
        filter: brightness(0.3) blur(7px);
    }
  }


.bright4{
    filter: brightness(1.5)
}  
.bright3{
    filter: brightness(1)
} 
.bright2{
    filter: brightness(0.75)
} 
.bright1{
    filter: brightness(0.5)
} 

// based on https://codepen.io/ellgine/pen/EjeXOZ

$colors: (
    background: #1d1f20,
    text: #eee
);

$font: (
    family: sans-serif,
    size: 60px,
    letter-spacing: 0
);

$config: (
    animated: false,
    nb-letters: 16,
    animation-length: 7s,
    mask-letters: ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
);

// ----------------------------------

@function color($value) {
    @return map-get($colors, $value);
}

@function font($value) {
    @return map-get($font, $value);
}

@function config($value) {
    @return map-get($config, $value);
}

@function random-string($list) {
    $result: null;
    @for $i from 1 through length($list) {
        $random: random(length($list));
        $current: nth($list, $random);
        $list: remove-nth($list, $random);
        $result: $result#{$current};
    }
    @return $result;
}

@function remove-nth($list, $index) {
    $result: ();
    @for $i from 1 through length($list) {
        @if $i != $index {
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}

@mixin respond-to($breakpoint) {
    @if type-of($breakpoint) == list {
        @media (min-width: nth($breakpoint, 1)) and (max-width: nth($breakpoint, 2)) {
            @content;
        }
    }
    @else {
        @media (max-width: $breakpoint) {
            @content;
        }
    }
}

// ----------------------------------

body {
    text-align: center;
    // background-color: black;
}

.wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 90%;
    font-size: 0;
    transform: translate(-50%);
}


.letter {
    width: font(size);
    display: inline-block;
    vertical-align: middle;
    position: relative;
    overflow: hidden;
    margin: 0 ceil(font(letter-spacing) / 2);
    font-family: 'Lato', sans-serif;
    font-size: font(size);
    font-weight: 600;
    line-height: font(size);
    text-transform: uppercase;
    color: color(text);
    @include respond-to(625px) {
        //font-size: 16px;
        //width: 18px;
    }
    &:before {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        word-break: break-all;
        background-color: #1d1f20;
    }
}

// ----------------------------------

@for $i from 1 through config(nb-letters) {
    $length: length(config(mask-letters));
    $random: random($length);
    $steps: $random - 1;
    $offset: font(size) * $steps * -1;
    $delay: random(100) / 100;
      $duration: $steps * (config(animation-length) / $random);
    .letter:nth-child(#{$i}):before {
        content: quote(randomstring(config(mask-letters)));
        margin-top: $offset;
        animation-name: letter#{$i};
        animation-duration: $duration - ($duration * $delay);
        animation-delay: $delay * 3s;
        animation-fill-mode: forwards;
        
    }
    @keyframes letter#{$i} {
        from {
            margin-top: $offset;
        }
        to {
            margin-top: font(size);
        }
    }
}